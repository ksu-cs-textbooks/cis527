<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Containers :: CIS 527 Textbook</title><link>https://textbooks.cs.ksu.edu/cis527/5a-containers/index.html</link><description>All the fun of virtual machines without all the extra baggage!</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 27 Jun 2024 15:05:08 -0500</lastBuildDate><atom:link href="https://textbooks.cs.ksu.edu/cis527/5a-containers/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://textbooks.cs.ksu.edu/cis527/5a-containers/01-introduction/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis527/5a-containers/01-introduction/index.html</guid><description>Resources Slides Docker Tutorial for Beginners by TechWorld with Nana on YouTube Video Transcript Welcome to module 5 A - the first new module added to this course in several years. In this module, we’re going to explore one of the biggest trends in system administration - containerization. We’ll see how containers have quickly overtaken traditional virtual machines for running workloads in the cloud, and how tools such as Docker make using containers quick and easy. We’ll also learn how we can use containers in our own development workflows, making it much easier to build tools that will work as seamlessly in the cloud as they do on a local system. Finally, we’ll take a look at Kubernetes, which has quickly become the most talked about tool for orchestrating containers in the cloud.</description></item><item><title>Architecture</title><link>https://textbooks.cs.ksu.edu/cis527/5a-containers/02-architecture/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis527/5a-containers/02-architecture/index.html</guid><description>Resources Slides Docker Tutorial for Beginners by TechWorld with Nana on YouTube Docker Overivew from Docker Container Report from Datadog GitHub Codespaces Overview from GitHub Virtual Machine-Based Features in Codio from Codio Video Transcript Up to this point, we’ve been working with traditional virtual machines in our labs. To use a traditional virtual machine, we first install a hypervisor that allows us to run multiple VMs on a single system. That hypervisor may be installed directly on the hardware, as it is in most enterprise settings, or we may install the hypervisor on top of an existing operating system, like we’ve done with VMWare on our own computers. Then, inside of the virtual machine, we install another entire operating system, as well as any of the software we need to run our applications. If we want to have multiple VMs that all run the same operating system, we’ll have to install a full copy of that operating system in each VM, in addition to the operating system that may be installed outside of our hypervisor. Can you spot a possible problem here?</description></item><item><title>Docker</title><link>https://textbooks.cs.ksu.edu/cis527/5a-containers/03-docker/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis527/5a-containers/03-docker/index.html</guid><description>Resources Slides Docker Tutorial for Beginners by TechWorld with Nana on YouTube Docker Manuals from Docker Docker Official Images on DockerHub Docker Hello World on DockerHub Docker Nginx on DockerHub Video Transcript Now that we’ve covered the general architecture of containers, let’s dive a bit deeper into Docker itself. Docker is by far the most commonly used tool for creating and managing containers on a small scale, and learning how to use it is a super useful skill for just about any one in a system administration or software development field. So, let’s take a look at!</description></item><item><title>Orchestration</title><link>https://textbooks.cs.ksu.edu/cis527/5a-containers/04-orchestration/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis527/5a-containers/04-orchestration/index.html</guid><description>Resources Slides Docker Tutorial for Beginners by TechWorld with Nana on YouTube 16 Best Container Orchestration Tools and Services from DevopsCube Docker Compose from Docker Installing Docker Compose from Docker Compose File Specification from Docker Video Transcript Up to this point, we’ve only looked at how we can start and run containers one at a time on a single platform. While that is great for development and testing, we should know by now that manually doing anything in an enterprise situation is not a great idea. So, let’s explore some of the methods and tools we can use to better orchestrate our containers and automate the creation and deployment of them.</description></item><item><title>Resources</title><link>https://textbooks.cs.ksu.edu/cis527/5a-containers/05-resources/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis527/5a-containers/05-resources/index.html</guid><description>Resources Slides Docker Tutorial for Beginners by TechWorld with Nana on YouTube Networking Containers from Docker Docker ARG, ENV, and .env - A Complete Guide by Vladislav Supalov Docker Storage Overview from Docker (contains information about choosing different storage types) Docker Bind Mounts from Docker Docker Volumes from Docker Video Transcript So far we’ve learned how to pull Docker images from a repository and instantiate them as containers, and also how to use Docker Compose to achieve the same result, but we really haven’t been able to do much with those containers. That’s because we haven’t given our containers any resources to work with. So, let’s do that now.</description></item><item><title>Building Images</title><link>https://textbooks.cs.ksu.edu/cis527/5a-containers/06-building/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis527/5a-containers/06-building/index.html</guid><description>Resources Slides Docker Tutorial for Beginners by TechWorld with Nana on YouTube Docker Get Started Tutorial from Docker Docker Sample Node Application from Docker on GitHub Docker Language Specific Guides from Docker GitHub CI Example (the sample site for this textbook’s theme) GitLab CI Example (this textbook) Video Transcript So far, we’ve explored how to download and use pre-built Docker images in our infrastructure. In many cases, that covers the vast majority of use cases, but what if we want to build our own Docker images? In this lesson, we’ll explore the process for creating our own Docker images from scratch. The process is pretty simple - we start with a special file called a Dockerfile that describes the image we want to create. In that file, we’ll identify a base image to build on, and then include information to configure that image, add our software and configure it, and then set some last details before building the new image. So, let’s see how that process works in practice!</description></item><item><title>Developing with Containers</title><link>https://textbooks.cs.ksu.edu/cis527/5a-containers/07-developing/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis527/5a-containers/07-developing/index.html</guid><description>Resources Slides Docker Tutorial for Beginners by TechWorld with Nana on YouTube Docker in Visual Studio Code from Visual Studio Code Developing Inside a Container from Visual Studio Code Remote Development in Containers Tutorial from Visual Studio Code GitHub CI Example (the sample site for this textbook’s theme) GitLab CI Example (this textbook) Video Transcript Docker is obviously a very useful tool for system administration, as we’ve seen throughout this module. In this lesson, however, let’s take a minute to talk about how we can use Docker in the context of software development. Depending on the application we are developing and how it will eventually be packaged and deployed, Docker can be used at nearly every stage of the development process.</description></item><item><title>Reverse Proxy</title><link>https://textbooks.cs.ksu.edu/cis527/5a-containers/08-reverse-proxy/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis527/5a-containers/08-reverse-proxy/index.html</guid><description>Resources Slides Docker Tutorial for Beginners by TechWorld with Nana on YouTube Using Docker to Set up Nginx Reverse Proxy With Auto SSL Generation from Linux Handbook Docker Security from Docker Protect the Docker daemon socket from Docker Docker Security Cheat Sheet from OWASP Traefik Quickstart from Traefik Video Transcript As we’ve seen, deploying services using Docker can make things very easy. Unfortunately, one major limitation of Docker is that the only way connect a running container to the outside world is by mapping a port on the host system to a port on the container itself. What if we want to run multiple containers that all host similar services, such as a website? Only one container can be mapped to port 80 - any other containers would either have to use a different port or be running on another host. Thankfully, one way we can get around this is by using a special piece of software known as a reverse proxy. In a nutshell, a reverse proxy will take incoming requests from the internet, analyze them to determine which container the request is directed to, and then forward that request to the correct container. It will also make sure the response from the container is directed to the correct external host. We call this a reverse proxy since it is acting as a connection into our Docker network, instead of a traditional proxy that helps containers reach the external internet.</description></item><item><title>Kubernetes</title><link>https://textbooks.cs.ksu.edu/cis527/5a-containers/09-kubernetes/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://textbooks.cs.ksu.edu/cis527/5a-containers/09-kubernetes/index.html</guid><description>Resources Kubernetes Tutorial for Beginners by TechWorld with Nana on YouTube Video Notes Note Instead of creating and recording my own video overview of Kubernetes, I decided it would be best to just include an existing video that does an excellent job of covering that topic. My video would have been very similar, but probably with fewer graphics and a bit more condensed.</description></item></channel></rss>